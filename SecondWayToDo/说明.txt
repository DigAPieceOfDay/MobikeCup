----------------------1、程序环境需求---------------------------------------------------

使用python2.7和MySQL5.5

----------------------2、需要基本表和计算方法-------------------------------------------
将原始的数据转为MySQL表
	train
	test
----------------------------------------------------------------------
将geohash转换为经纬度见
	generate_latlng.py
	geohash.py（开源程序）
----------------------------------------------------------------------
将包含经纬度转换后数值和原geohash分别保存为表
	test_complete
	train_complete
----------------------------------------------------------------------
利用train集对车辆ID算法进行修正，并将修正数据事先存入，需要在模块test_bike_correct的生成对test集预测概率后再根据train集修正存入表
	bikeid_probability_correct
----------------------------------------------------------------------
利用train集统计所有距离，并按照曼哈顿距离100米为单位计算概率分布存入表
	train_m_distance_count

----------------------3、比赛思路-------------------------------------------------------

把这个比赛当成分类问题。考虑到类别的数量约10万左右，且如果错误不论距离多近都不得分，采用神经网络等方法无法做到精确预测，决定采用概率的方法进行预测。分别按照地理位置、车辆、行程、用户常去地点、用户行程5方面求概率，并按照概率从大到小排序。最后把5个方面的预测概率合再一起取最大值的3个值。
通过统计发现test集与train集有较大偏差，说明主办方抽样方法不同，所有没有使用线下测试，全部使用线上提交看结果，把每个分模块调试到最优再合在一起。
优化核心是借鉴了卷积神经网络的卷积核的概念，使用十字形的卷积核对出发点相邻的地区进行卷积后代替原位置。扩大了数据量，且与现实中使用的情况接近。
1次使用如下：
	1
1	2	1
	1
2次使用如下：
		1
	2	4	2
1	4	8	4	1
	2	4	2
		1
----------------------4、主要代码-------------------------------------------------------
---------------Combine_mix_4_error_0.330383751806461.sql--------------
包含如下5个模块
teststart_trainend	按照test集地理位置求出发点周围曼哈顿距离2公里以内train集所有热门终点，并乘以train集中的基于距离的概率分布。
test_bike_correct	按照test集车辆ID，假设下次出发点就是本次终点，基于距离和时间计算概率并按照train集进行修正。
trainstart_trainend_nearby_cross_pro	按照test集出发点十字形卷积，计算其所有对应的train集的所有行程，根据行程终点计算概率。
userid_startandend_3	同用户涉及测试与训练集所有起点与终点，先距离函数后求和，求比例，乘以最近的距离函数。
userid_starttoend_2	同用户和出发地，对出发点进行两次十字卷积（变成较大的菱形），再统计对应的终点，计算概率。
	
	
--------------Combine_mix_8_0.336926118008556.sql----------------------
包含如下5个模块
teststart_trainend	同上
test_bike_correct	同上
starttoend_2	对出发点进行两次十字卷积（变成较大的菱形）。
userid_startandend_3	同上
userid_starttoend_5	加时计算间间隔，并对时间增加了开方和系数，对出现次数少的增加惩罚系数
